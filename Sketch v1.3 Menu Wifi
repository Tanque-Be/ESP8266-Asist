#include <ESP8266WiFi.h>
#include <ArduinoOTA.h>

const char* ssid = "Nombre Red"; // SSID inicial
const char* password = "Password Red"; // Contrase√±a inicial

bool wifiConnected = false;

void setup() {
  Serial.begin(115200);
  Serial.println();
  Serial.println("üöÄ Iniciando Menu OTA Full 1.3 PRO Edition");

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  Serial.print("üîå Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  wifiConnected = true;

  Serial.println();
  Serial.println("‚úÖ WiFi Conectado!");
  Serial.print("üì° IP: ");
  Serial.println(WiFi.localIP());

  setupOTA();
  
  mostrarMenu();
}

void loop() {
  ArduinoOTA.handle();

  if (Serial.available()) {
    char opcion = Serial.read();
    ejecutarOpcion(opcion);
    mostrarMenu();
  }
}

void setupOTA() {
  ArduinoOTA.setHostname("Menu_OTA_ESP8266");
  ArduinoOTA.setPassword("1");

  ArduinoOTA.onStart([]() {
    Serial.println("üöÄ OTA Inicio: Subiendo nuevo Sketch...");
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("‚úÖ OTA Finalizado: ¬°√âxito!");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("üì¶ OTA Progreso: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("‚ùå OTA Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Error de autenticaci√≥n");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Error al comenzar");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Error de conexi√≥n");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Error de recepci√≥n");
    else if (error == OTA_END_ERROR) Serial.println("Error al finalizar");
  });

  ArduinoOTA.begin();
  Serial.println("‚úÖ OTA listo para recibir actualizaciones (Password: '1').");
}

void mostrarMenu() {
  Serial.println("\n======== MEN√ö PRINCIPAL ========");
  Serial.println("1. üì° Escanear redes WiFi");
  Serial.println("2. üîß Cambiar WiFi");
  Serial.println("3. üîµ Buscar dispositivos Bluetooth");
  Serial.println("================================");
  Serial.println("‚å®Ô∏è Ingresa opci√≥n (1, 2 o 3):");
}

void ejecutarOpcion(char opcion) {
  switch (opcion) {
    case '1':
      escanearWiFi();
      break;
    case '2':
      cambiarWiFi();
      break;
    case '3':
      buscarBluetooth();
      break;
    default:
      Serial.println("‚ö†Ô∏è Opci√≥n no v√°lida. Intenta de nuevo.");
      break;
  }
}

struct RedWiFi {
  String ssid;
  int32_t rssi;
  uint8_t encryptionType;
};

void escanearWiFi() {
  Serial.println("üîç Escaneando redes WiFi...");

  int n = WiFi.scanNetworks();
  if (n == 0) {
    Serial.println("‚ùå No se encontraron redes.");
  } else {
    RedWiFi redes[n];
    for (int i = 0; i < n; ++i) {
      redes[i].ssid = WiFi.SSID(i);
      redes[i].rssi = WiFi.RSSI(i);
      redes[i].encryptionType = WiFi.encryptionType(i);
    }

    // Ordenar de mejor se√±al a peor (tipo burbuja sencillo)
    for (int i = 0; i < n - 1; ++i) {
      for (int j = i + 1; j < n; ++j) {
        if (redes[j].rssi > redes[i].rssi) {
          RedWiFi temp = redes[i];
          redes[i] = redes[j];
          redes[j] = temp;
        }
      }
    }

    Serial.printf("üì∂ %d redes encontradas:\n\n", n);
    for (int i = 0; i < n; ++i) {
      String tipoSeguridad;
      switch (redes[i].encryptionType) {
        case ENC_TYPE_NONE:
          tipoSeguridad = "Abierta";
          break;
        case ENC_TYPE_WEP:
          tipoSeguridad = "WEP";
          break;
        case ENC_TYPE_TKIP:
          tipoSeguridad = "WPA";
          break;
        case ENC_TYPE_CCMP:
          tipoSeguridad = "WPA2";
          break;
        case ENC_TYPE_AUTO:
          tipoSeguridad = "Auto";
          break;
        default:
          tipoSeguridad = "Desconocido";
          break;
      }

      Serial.printf("%d. üì∂ %s (%s) - Se√±al: %d dBm\n", i + 1, redes[i].ssid.c_str(), tipoSeguridad.c_str(), redes[i].rssi);
    }
  }
}

void cambiarWiFi() {
  Serial.println("‚öôÔ∏è Funci√≥n para cambiar WiFi (Placeholder - ¬°en futura versi√≥n ser√° interactiva!).");
}

void buscarBluetooth() {
  Serial.println("üîµ Buscando dispositivos Bluetooth... (Placeholder - el ESP8266 no tiene Bluetooth integrado).");
}
